plugins {
	id "java-library"
	id "maven-publish"
	id "signing"
  id "com.github.jk1.dependency-license-report" version "1.3"
	id "net.saliman.properties" version "1.5.1"
	id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

group = "com.marklogic"
version = "4.2.1"

sourceCompatibility = "8"
targetCompatibility = "8"

repositories {
	mavenLocal()
	mavenCentral()

	// Still needed for marklogic-junit5
	jcenter()
}

dependencies {
  api 'com.marklogic:ml-javaclient-util:4.2.0'
  api 'org.springframework:spring-web:5.3.7'

	implementation 'jaxen:jaxen:1.2.0'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation 'org.jdom:jdom2:2.0.6'

	// Forcing httpclient to use this to address https://snyk.io/vuln/SNYK-JAVA-COMMONSCODEC-561518
	implementation 'commons-codec:commons-codec:1.13'

	// For EqualsBuilder; added in 3.8.1 to support detecting if a mimetype's properties have changed or not
	implementation "org.apache.commons:commons-lang3:3.12.0"

	// For PreviewInterceptor; can be excluded if that feature is not used
	implementation "com.flipkart.zjsonpatch:zjsonpatch:0.4.11"

	// Required for Java 11
	implementation "javax.xml.bind:jaxb-api:2.3.1"
	implementation "com.sun.xml.bind:jaxb-core:2.3.0.1"
	implementation "com.sun.xml.bind:jaxb-impl:2.3.3"

	// Don't want to include this in the published jar, just the executable jar
	compileOnly "com.beust:jcommander:1.78"
	compileOnly "ch.qos.logback:logback-classic:1.2.3"

	testImplementation "org.junit.jupiter:junit-jupiter:5.7.1"
	testImplementation 'org.springframework:spring-test:5.3.7'
	testImplementation 'commons-io:commons-io:2.8.0'
	testImplementation 'xmlunit:xmlunit:1.6'

	// Forcing Spring to use logback for testing instead of commons-logging
	testImplementation "ch.qos.logback:logback-classic:1.2.3"
	testImplementation "org.slf4j:jcl-over-slf4j:1.7.30"
	testImplementation "org.slf4j:slf4j-api:1.7.30"
}

// This ensures that Gradle includes in the published jar any non-java files under src/main/java
sourceSets.main.resources.srcDir 'src/main/java'

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier 'sources'
  from sourceSets.main.allSource
	// For unknown reasons, Gradle 7.1 (but not 6.x) is complaining that AbstractManager.java is a duplicate.
	duplicatesStrategy = "exclude"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier "javadoc"
	from javadoc
}
javadoc.failOnError = false

artifacts {
	archives javadocJar, sourcesJar
}
signing {
	sign configurations.archives
}

publishing {
	publications {
		mainJava(MavenPublication) {
			pom {
				name = "${group}:${project.name}"
				description = "Java client for the MarkLogic REST Management API and for deploying applications to MarkLogic"
				packaging = "jar"
				url = "https://github.com/marklogic-community/${project.name}"
				licenses {
					license {
						name = "The Apache License, Version 2.0"
						url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
					}
				}
				developers {
					developer {
						id = "marklogic"
						name = "MarkLogic Github Contributors"
						email = "general@developer.marklogic.com"
						organization = "MarkLogic"
						organizationUrl = "https://www.marklogic.com"
					}
				}
				scm {
					url = "git@github.com:marklogic-community/${project.name}.git"
					connection = "scm:git@github.com:marklogic-community/${project.name}.git"
					developerConnection = "scm:git@github.com:marklogic-community/${project.name}.git"
				}
			}
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name = "central"
			url = mavenCentralUrl
			credentials {
				username mavenCentralUsername
				password mavenCentralPassword
			}
		}
	}
}

test {
	useJUnitPlatform()
  testLogging {
    events 'started','passed', 'skipped', 'failed'
    exceptionFormat 'full'
  }
}

task executableJar(type: Jar) {
	description = "Construct an executable jar for executing ml-app-deployer commands via the command line"
	archiveBaseName = "deployer"
	manifest {
		attributes("Main-Class": "com.marklogic.appdeployer.cli.Main")
	}
	// Include this project's class files
	from sourceSets.main.output
	// Include all project dependencies
	from {
		configurations.compileClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	from {
		configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
}

// See https://github.com/snyk/gradle-plugin for more information
snyk {
	//arguments = '--all-sub-projects'
	severity = 'low'
	api = snykToken
	autoDownload = true
	autoUpdate = true
}
