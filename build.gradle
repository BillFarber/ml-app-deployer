plugins {
  id "java-library"
  id "maven-publish"
  id "eclipse"
  id "idea"
  id "com.jfrog.bintray" version "1.8.4"
  id "com.github.jk1.dependency-license-report" version "1.3"

	id "net.saliman.properties" version "1.5.1"
	id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

sourceCompatibility = "8"
targetCompatibility = "8"

repositories {
	mavenLocal()
  jcenter()
	mavenCentral()
}

dependencies {
  api 'com.marklogic:ml-javaclient-util:4.1.0-SNAPSHOT'
  api 'jaxen:jaxen:1.1.6'
  api 'org.apache.httpcomponents:httpclient:4.5.13'
  api 'org.springframework:spring-web:5.2.9.RELEASE'

	// Forcing httpclient to use this to address https://snyk.io/vuln/SNYK-JAVA-COMMONSCODEC-561518
	api 'commons-codec:commons-codec:1.13'

	// For EqualsBuilder; added in 3.8.1 to support detecting if a mimetype's properties have changed or not
	api "org.apache.commons:commons-lang3:3.11"

	// For PreviewInterceptor; can be excluded if that feature is not used
	api "com.flipkart.zjsonpatch:zjsonpatch:0.4.11"

	// Required for Java 11
	api "javax.xml.bind:jaxb-api:2.3.1"
	api "com.sun.xml.bind:jaxb-core:2.3.0.1"
	api "com.sun.xml.bind:jaxb-impl:2.3.3"

	// Don't want to include this in the published jar, just the executable jar
	compileOnly "com.beust:jcommander:1.78"

  testImplementation 'com.marklogic:ml-junit:3.2.0'
	// Force ml-junit to use 5.2.8 instead of 4.1.5
	testImplementation "org.springframework:spring-test:5.2.9.RELEASE"
	testImplementation 'commons-io:commons-io:2.8.0'

  // Forcing Spring to use logback instead of commons-logging
  implementation "ch.qos.logback:logback-classic:1.2.3" // Needs to be implementation for CLI
	testImplementation group: "org.slf4j", name: "jcl-over-slf4j", version: "1.7.30"
	testImplementation group: "org.slf4j", name: "slf4j-api", version: "1.7.30"
}

// This ensures that Gradle includes in the published jar any non-java files under src/main/java
sourceSets.main.resources.srcDir 'src/main/java'

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier 'sources'
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier "javadoc"
	from file(javadocsDir + "/" + project.name)
}

javadoc.destinationDir = file(javadocsDir + "/" + project.name)
javadoc.failOnError = false

publishing {
  publications {
    mainJava(MavenPublication) {
      from components.java
    }
    sourcesJava(MavenPublication) {
      from components.java
      artifact sourcesJar
    }
	  mavenJavadoc(MavenPublication) {
		  artifact javadocJar
	  }
  }
}

if (project.hasProperty("myBintrayUser")) {
  bintray {
    user = myBintrayUser
    key = myBintrayKey
    publications = ['mainJava', 'sourcesJava']
    pkg {
      repo = 'maven'
      name = project.name
      licenses = ['Apache-2.0']
      vcsUrl = 'https://github.com/rjrudin/' + project.name + '.git'
      version {
        name = project.version
        released = new Date()
      }
    }
  }
}

test {
  testLogging {
    events 'started','passed', 'skipped', 'failed'
    exceptionFormat 'full'
  }
}

task executableJar(type: Jar) {
	description = "Construct an executable jar for executing ml-app-deployer commands via the command line"
	archiveBaseName = "deployer"
	manifest {
		attributes("Main-Class": "com.marklogic.appdeployer.cli.Main")
	}
	// Include this project's class files
	from sourceSets.main.output
	// Include all project dependencies
	from {
		configurations.compileClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	from {
		configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
}

// See https://github.com/snyk/gradle-plugin for more information
snyk {
	//arguments = '--all-sub-projects'
	severity = 'low'
	api = snykToken
	autoDownload = true
	autoUpdate = true
}
